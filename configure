#!/bin/bash
function help()
{
    echo "Usage: ./configure [OPTIONS]"
    echo ""
    echo "  -h, --help"
    echo "              Print help message"
    echo ""
    echo "CMake Build options:"
    echo ""
    echo "  -SC, --SCDBG"
    echo "              Enable scanner debug tracing"
    echo "  -T, --TOKDBG"
    echo "              Enable tokenizer debug tracing"
    echo "  -L, --LEXDBG"
    echo "              Enable lexer debug tracing"
    echo "  -P, --PARDBG"
    echo "              Enable parser debug tracing"
    echo "  -S, --SEMDBG"
    echo "              Enable semantic analyzer debug tracing"
    echo "  -C, --CODEDBG"
    echo "              Enable code generator debug tracing"
    echo ""
    echo "Build options:"
    echo ""
    echo "  -clean"
    echo "              Delete build folder to clean compile"
    echo ""
    echo "Compiler options:"
    echo ""
    echo "  -gcc"
    echo "              Use GCC to build project (Default option)"
    echo "  -clang"
    echo "              Use Clang to build project"
    echo "  -llvm"
    echo "              Use Clang/LLVM-IR to build project"
    echo ""
    echo "If no argument is provided, cmake is invoked with"
    echo "all preprocessor flags set to off by default."
    echo ""
    echo "@author: Foivos Tsimpourlas"
    echo "@webpage: <https://github.com/fivosts/Mlang>"
    exit $1
}

function parse_arguments()
{
    for arg in "${ARGS[@]}"; do
    case "$arg" in
        -h|--help)
            help 0
            ;;
	    -SC|--SCDBG)
	        CMAKE_ARGS+=("-DSCDBG=ON")
	        ;;
        -T|--TOKDBG)
            CMAKE_ARGS+=("-DTOKDBG=ON")
            ;;
	    -L|--LEXDBG)
	        CMAKE_ARGS+=("-DLEXDBG=ON")
	        ;;
        -P|--PARDBG)
            CMAKE_ARGS+=("-DPARDBG=ON")
            ;;
        -S|--SEMDBG)
            CMAKE_ARGS+=("-DSEMDBG=ON")
            ;;
        -C|--CODEDBG)
            CMAKE_ARGS+=("-DCODEDBG=ON")
            ;;
        -clean)
            BUILD_ARGS+=("-clean")
            ;;
        -gcc)
            COMPILE_ARGS+=("-gcc")
            ;;
        -clang)
            COMPILE_ARGS+=("-clang")
            ;;
        -llvm)
            COMPILE_ARGS+=("-llvm")
            ;;
        *)
            echo "configure: Unrecognized option " $arg
            help 1
            ;;
    esac
    done
}

function setup_deps()
{
    echo "-- Scanning for apt package dependencies"

    while IFS="" read -r DEP_PACK || [ -n "$DEP_PACK" ]
    do
        # PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $DEP_PACK|grep "install ok installed")
        PKG_OK=$($DEP_PACK --version |grep "command not found")
        # echo Checking for somelib: $PKG_OK
        if [ "" != "$PKG_OK" ]; then
        echo "-- Installing $DEP_PACK"
        sudo apt --yes install $DEP_PACK
        else
            echo "-- $DEP_PACK is installed"
        fi
    done < DEPS.txt
}

function build_and_compile()
{

    for arg in "${BUILD_ARGS[@]}"; do
    case "$arg" in
        "-clean")
            rm -rf build/
            ;;
    esac
    done

    if [ "${#COMPILE_ARGS[@]}" -gt 1 ]; then
        echo "Multiple compilers detected. Compilation failed."; return 1
    elif [ "${#COMPILE_ARGS[@]}" -eq 0 ]; then
        export CC=gcc
        export CXX=g++
    else
        for arg in "${COMPILE_ARGS[@]}"; do
            case "$arg" in
                -gcc)
                    export CC=gcc
                    export CXX=g++
                    ;;
                -clang)
                    export CC=clang
                    export CXX=clang++
                    ;;
                -llvm)
                    export CC=clang
                    export CXX=clang++
                    CMAKE_ARGS+=("-DLLVM=ON")
                    ;;
            esac
        done
    fi

    echo "-- Configuring Mlang"
    if [ ! -d "build" ]; then 
        mkdir build
    fi

    cmake --version

    cd build && cmake .. "${CMAKE_ARGS[@]}" || (echo "Cmake config failed: Error $$"; return $$)
    make || (echo "Compilation failed: Error $$"; return $$)
    return 0
}

declare -a ARGS=("$@")
declare -a CMAKE_ARGS=()
declare -a BUILD_ARGS=()
declare -a COMPILE_ARGS=()

parse_arguments
setup_deps
build_and_compile
exit $?
